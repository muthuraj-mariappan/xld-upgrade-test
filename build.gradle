import groovy.json.JsonSlurper

buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        ["releases", "public"].each { r ->
            maven {
                url "${nexusBaseUrl}/repositories/${r}"
                credentials {
                    username nexusUserName
                    password nexusPassword
                }
            }
        }
        mavenCentral()
    }
    dependencies {
        classpath("com.xebialabs.gradle.plugins:integration-server-gradle-plugin:10.4.0-1227.911")
    }
}
plugins {
    id 'scala'
    id 'idea'
}

apply plugin: "integration.server"

deployIntegrationServer {
    cli {
        version = "10.4.0-1201.113"
    }
    servers {
        server01 {
            dockerImage = "xebialabs/xl-deploy"
            version = "10.3.3"
            httpPort = 4516
            previousInstallation = "true"
            yamlPatches = [
                    'centralConfiguration/deploy-server.yaml': [
                            'deploy.server.label': 'Deploy Hello World'
                    ]
            ]
            overlays = [
                    conf: [
                            files("src/test/resources/deployit-license.lic")
                    ],
                    centralConfiguration: [
                            files("src/test/resources/deploy-client.yaml"),
                            files("src/test/resources/deploy-repository.yaml")
                    ]
            ]
        }
        server02 {
            dockerImage = "xebialabsunsupported/xl-deploy"
            version = "10.4.0-1201.113"
        }
    }
}

task refresh {
    doLast {
        def url = "http://localhost:4516/actuator/refresh"
        def p = [
                    'curl',
                    '-d',
                    '{}',
                    '-H',
                    "Content-Type: application/json",
                    '-H',
                    "Accept: application/json",
                    url
        ].execute()
        def json = new JsonSlurper().parseText(p.text)
        System.out.println("refresh output -- " + json)
    }
}

task testClientSettings {
    doLast {
        def url = "http://localhost:4516/deployit/internal/configuration/properties"
        def p = [
                    'curl',
                    '-H',
                    "Accept: application/json",
                    url
        ].execute()
        def json = new JsonSlurper().parseText(p.text)
        System.out.println("configuration properties -- " + json)

        if (json['gui.toastr.info.timeout-ms'] != '3000') {
            throw new Exception("gui.toastr.info.timeout-ms not matched")
        } else if (json['gui.toastr.error.timeout-ms'] != '4000') {
            throw new Exception("gui.toastr.error.timeout-ms not matched")
        } else if (json['gui.toastr.success.timeout-ms'] != '500') {
            throw new Exception("gui.toastr.success.timeout-ms not matched")
        }
    }
}

rootProject.afterEvaluate {
    startIntegrationServer.dependsOn(build)
    refresh.mustRunAfter(startIntegrationServer)
    testClientSettings.dependsOn(startIntegrationServer, refresh)
}
