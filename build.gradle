import groovy.json.JsonSlurper

buildscript {
    repositories {
        mavenLocal()
        maven {
            url 'https://oss.sonatype.org/service/local/repositories/releases/content'
        }
        ["releases", "public"].each { r ->
            maven {
                url "${nexusBaseUrl}/repositories/${r}"
                credentials {
                    username nexusUserName
                    password nexusPassword
                }
            }
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("com.xebialabs.gradle.plugins:integration-server-gradle-plugin:10.4.0-1025.1003")
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins {
    id 'scala'
    id 'idea'
    id 'org.springframework.boot' version "${springBootVersion}"
}

repositories {
    mavenCentral()
}

apply plugin: "integration.server"
apply plugin: 'org.springframework.boot'
apply plugin: 'scala'

dependencies {
    implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.scala-lang:scala-library:2.13.6'
}

deployIntegrationServer {
    servers {
        upgradeSource {
            previousInstallation = true
            version = "10.1.0"
            httpPort = 4519
            overlays = [
                    conf: [
                            files("src/test/resources/deployit-license.lic"),
                            files("src/test/resources/xl-deploy.conf")
                    ]
            ]
        }
        controlPlane {
            version = "10.4.0-1018.113"
        }
    }
}

task refresh {
    doLast {
        def url = "http://localhost:4519/actuator/refresh"
        def p = [
                    'curl',
                    '-d',
                    '{}',
                    '-H',
                    "Content-Type: application/json",
                    '-H',
                    "Accept: application/json",
                    url
        ].execute()
        def json = new JsonSlurper().parseText(p.text)
        System.out.println("refresh output -- " + json)
    }
}

task testClientSettings {
    doLast {
        def url = "http://localhost:4519/deployit/internal/configuration/properties"
        def p = [
                    'curl',
                    '-H',
                    "Accept: application/json",
                    url
        ].execute()
        def json = new JsonSlurper().parseText(p.text)
        System.out.println("configuration properties -- " + json)

        if (json['gui.toastr.info.timeout-ms'] != '3000') {
            throw new Exception("gui.toastr.info.timeout-ms not matched")
        } else if (json['gui.toastr.error.timeout-ms'] != '4000') {
            throw new Exception("gui.toastr.error.timeout-ms not matched")
        } else if (json['gui.toastr.success.timeout-ms'] != '500') {
            throw new Exception("gui.toastr.success.timeout-ms not matched")
        }
    }
}

rootProject.afterEvaluate {
    startIntegrationServer.dependsOn(build)
    refresh.mustRunAfter(startIntegrationServer)
    testClientSettings.dependsOn(startIntegrationServer, refresh)
}
